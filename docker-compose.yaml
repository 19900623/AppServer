# Use root/example as user/password credentials
version: '3.1'

services:
  #Mysql DB
  db:
    image: mysql
    container_name: app_server_db
    environment:
      MYSQL_ROOT_PASSWORD: appserver
      #MYSQL_DATABASE: onlyoffice
      #MYSQL_USER: dev
      #MYSQL_PASSWORD: dev
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    volumes: 
      - ./.data/mysql:/var/lib/mysql
      - ./mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    networks:
      - app-network

  #DB Management Site
  adminer:
    image: adminer
    container_name: app_server_db_manager
    restart: always
    #ports:
    #  - 8080:8080
    depends_on:
      - db
    networks:
      - app-network

  web_components:
    image: node:13.8.0-alpine
    container_name: app_server_web_components
    volumes:
      - ./web/ASC.Web.Components/:/app/appserver/web/components
      - ./packages:/app/appserver/packages
    working_dir: /app/appserver/web/components
    command: yarn start
  
  web_common:
    image: node:13.8.0-alpine
    container_name: app_server_web_common
    volumes:
      - ./web/ASC.Web.Common/:/app/appserver/web/common
      - ./packages:/app/appserver/packages
    working_dir: /app/appserver/web/common
    command: > 
      sh -c "yarn link --cwd ../../packages/asc-web-components && 
             yarn link "asc-web-components" && 
             yarn start"
  
  studio_client:
    image: node:13.8.0-alpine
    container_name: app_server_web_client
    volumes:
      - ./packages:/app/appserver/packages
      - ./web/ASC.Web.Client/:/app/appserver/web/client
    working_dir: /app/appserver/web/client
    command: > 
      sh -c "yarn link --cwd ../../packages/asc-web-components && 
             yarn link "asc-web-components" &&
             yarn link --cwd ../../packages/asc-web-common && 
             yarn link "asc-web-common" &&
             yarn start"
    # ports:
    #   - 5001:5001

  # api_server:
  #   image: mcr.microsoft.com/dotnet/core/sdk:3.1.101-alpine3.10
  #   container_name: app_server_api
  #   restart: always
  #   command: ls /app
  #   #command: dotnet run --project /app/web/ASC.Web.Api.csproj
  #   volumes: 
  #     - ./:/app
  #   depends_on:
  #     - db
  #   networks:
  #     - app-network

  # studio_server:
  #   image: mcr.microsoft.com/dotnet/core/sdk:3.1.101-alpine3.10
  #   container_name: app_server_studio
  #   restart: always
  #   working_dir: /var/www/
  #   command: dotnet run --project web/ASC.Web.Studio.csproj
  #   volumes: 
  #     - ./:/var/www/
  #   depends_on:
  #     - db
  #   networks:
  #     - app-network

  # people_server:
  #   image: mcr.microsoft.com/dotnet/core/sdk:3.1.101-alpine3.10
  #   container_name: app_server_people
  #   restart: always
  #   working_dir: /var/www/
  #   command: dotnet run --project products/ASC.People/Server/ASC.People.csproj
  #   volumes: 
  #     - ./:/var/www/
  #   depends_on:
  #     - db
  #   networks:
  #     - app-network

  #Nginx Service
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    volumes: 
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge