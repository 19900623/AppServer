version: "3.4"

services:

  app_build:
    build:
      context: .
      target: builder
    container_name: app_build 
    hostname: app_build 
    restart: always
    networks:
      - onlyoffice
    depends_on:
      - "mysql"  
    environment:  
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    expose:
      - "5000"
      - "5010"
      - "5015"
      - "5006"
     # - "5004"
      - "5007"
      - "5009"
      - "5003"
        
  mysql:
    build:
     context: ./config/mysql/
    container_name: mysql
    hostname: ${MYSQL_HOST}
    restart: always
    ports:
      - 3306:3306 
    expose:
      - "3306"
    networks:
      - onlyoffice
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./config/mysql/conf.d:/etc/mysql/conf.d
      - mysql_data:/var/lib/mysql
      - mysql_log:/var/log/mysql:rw
      - mysql_error:/var/log/mysql/error.log:rw

  people.client:
    build:
      context: .
      target: people.client  
    container_name: people.client
    hostname: people_client
    restart: always
    depends_on:
    - mysql
    environment:
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    expose:
    - "5002"
    networks:
    - onlyoffice
    volumes:
    - app_data:/app/onlyoffice/data/
    - app_log:/var/log/supervisor/


  people.server:
    build:
      context: .
      target: people.server  
    image: people.server
    container_name: people.server
    hostname: people_server
    restart: always
    # depends_on:
    # - mysql
    # environment:
    #   MYSQL_HOST: mysql${MYSQL_HOST}
    #   MYSQL_USER: ${MYSQL_USER}
    #   MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    #   MYSQL_DATABASE: ${MYSQL_DATABASE}
    # expose:
    # - "5004"
    networks:
    - onlyoffice
    # volumes:
    # - app_data:/app/onlyoffice/data/
    # - app_log:/var/log/supervisor/


  storybook:
    build:
      context: ./../../../
      dockerfile: build/install/docker/storybook/Dockerfile
    image: storybook
    container_name: storybook
    hostname: storybook
    restart: always
    depends_on:
    - mysql
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    expose:
    - "8081"
    - "8082"
    networks:
    - onlyoffice
    volumes:
    - app_data:/app/onlyoffice/data/
    - app_log:/var/log/supervisor/

      
  nginx:
    build:
      context: .
      target: web
    container_name: nginx
    hostname: nginx
    restart: always
    ports:
      - 80:80 
      - 443:443 
      - 8092:8092 
      - 8081:8080
    networks:
      - onlyoffice
    depends_on:
      - app_build
      - mysql
    #environment:
      # - NGINX_HOST=app_build
      # - NGINX_PORT=8092 
    volumes:
      - nginx_log:/var/log/nginx
    #command: /bin/sh -c "envsubst < /etc/nginx/templates/onlyoffice.conf > /etc/nginx/conf.d/onlyoffice.conf && exec nginx -g 'daemon off;'"

networks:
  onlyoffice:
    driver: 'bridge'

volumes:
  mysql_data:
  mysql_log:
  mysql_error:
  nginx_log:
  app_data:
  app_log: